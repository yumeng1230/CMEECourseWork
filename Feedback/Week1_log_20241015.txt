Starting code feedback for Yumeng, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.56 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Feedback, .vscode, week1, .git, week2

Found the following files in parent directory: readme.md

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: readme.md

Printing contents of readme.md:

**********************************************************************
My CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: week1, week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: sandbox, data, results, code

Found the following files: readme.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:

**********************************************************************
tabtocsv.sh
Description: This script converts a tab-delimited file into a comma-delimited format (CSV).
Usage: This script must be run in the data directory  

CountLines.sh
Description: This script counts the number of lines in a specified file and displays the result. 
Usage: This script must be run in the data directory. 

ConcatenateTwoFiles.sh
Description: This script concatenates two files and saves the result in a third file.
Usage: This script must be run in the data directory.

tiff2png.sh
Description: This script converts all .tif files in the current directory to .png format using the convert command.
Usage: This script must be run in the data directory.

UNIXPrac1.txt
Description: FASTA exercise
Usage: This script must be run in the data directory.

csvtospace.sh
Description: Converts comma-separated values (CSV) files to space-separated values files
Usage: This script must be run in the data directory.



**********************************************************************

Results directory is empty - good! 

Found 9 code files: boilerplate.sh, Countlines.sh, MyExampleScript.sh, UnixPrac1.txt, tabtocsv.sh, tiff2png.sh, ConcatenateTwoFiles.sh, csvtospace.sh, variables.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Yumeng Huang  yh4724@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2024

echo -e "\nThis is a shell script! \n"

#exit

cd ../code
bash boilerplate.sh
exist
**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shell script! 


This is a shel
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

bash: warning: shell level (1000) too high, resetting to 1
bash: warning: shell level (1000) too high, resetting to 1
bash: warning: shell level (1000) too high, resetting to 1
bash: warning: shell level (1000) too high, resetting to 1
bash: warning: shell level (1000) too high, resetting to 1
bash: warning: shell level (1000) too high, resetting to 1

======================================================================
Inspecting script file Countlines.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yumeng Huang  yh4724@ic.ac.uk
# Script: Countlines.sh
# Description: 

# Validates if the file exists and if it is a .txt file before proceeding
# Arguments: 1 -> tab delimited file
# Date: Oct 2024

#!/bin/bash

# Check if the Bash interpreter is available
if [ -z "$(command -v bash)" ]; then
  echo "Error: Bash is not available or not in the PATH."
  exit 1
fi

# Check if a file name is provided as an argument
if [ -z "$1" ]; then
  echo "Error: No file provided. Please provide a file name."
  exit 1
fi

# Check if the file exists and is a regular file
if [ ! -f "$1" ]; then
  echo "Error: File '$1' does not exist or is not a regular file."
  exit 1
fi

# Check if the file is readable
if [ ! -r "$1" ]; then
  echo "Error: File '$1' is not readable. Please check permissions."
  exit 1
fi

# Output the result
echo "The file $1 has $NumLines lines"



**********************************************************************

Testing Countlines.sh...

Output (only first 500 characters): 


**********************************************************************
Error: No file provided. Please provide a file name.

**********************************************************************

Code ran without errors

Time consumed = 0.00705s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00437s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
##FASTA exercise
#1#Count how many lines there are in each file
wc -l *.fasta
#2#Print everything starting from the second line for the E.coli genome
sed '1d' E.coli.fasta
#3#Count the sequence length of this genome
grep -v ">" ./E.coli.fasta | tr -d '\n' | wc -c 
#4#Count the matches of a particular sequence
grep -v ">" ./E.coli.fasta | tr -d '\n' | grep -o "ATGC" | wc -l
#5#Compute the AT/GC ratio
echo "scale=2; ($(grep -v ">" ./E.coli.fasta | tr -d '\n' | grep -o "[AT]" | wc -l) / $(grep -v ">" ./E.coli.fasta | tr -d '\n' | grep -o "[GC]" | wc -l))" | bc 



**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Yumeng Huang  yh4724@ic.ac.uk
# Script: tabtocsv.sh
# Description: Substitute the tabs in the files with commas
# Saves the output into a .csv file located in the "result" directory
# Validates if the file exists and if it is a .txt file before proceeding
# Arguments: 1 -> tab delimited file
# Date: Oct 2024

set -e

# Check if the argument is provided
if [ $# -eq 0 ]; then
    echo "Error: No file provided. Usage: $0 filename"
    exit 1
fi

# Check if the file exists
if [ ! -f "$1" ]; then
    echo "Error: File '$1' not found!"
    exit 2
fi

# Check if the file is a .txt file
if [ "${1##*.}" != "txt" ]; then
    echo "Error: The file must be a .txt file (tab-delimited)."
    exit 3
fi

# Check if the file is tab-delimited
if ! grep -q $'\t' "$1"; then
    echo "Error: The file '$1' does not appear to be tab-delimited."
    exit 3
fi

# Check write permissions for the result directory
if [ ! -w result ]; then
    echo "Error: No write permission for the 'result' directory."
    exit 4
fi

# Set the output file path in the 'result' directory
filename=$(basename "$1")
output="result/${filename}.csv"

# Check if output file already exists to avoid overwriting
if [ -f "$output" ]; then
    echo "Error: Output file '$output' already exists. Please remove it or choose a different input file."
    exit 4
fi

# Convert tabs to commas and save to the result directory
echo "Creating a comma delimited version of $1 ..."
cat "$1" | tr -s "\t" "," >> "$output"

# Check if the output file was successfully created
# If the status code is not 0(indicating failure), an error message is displayed and the exit code is 5
if [ $? -ne 0 ]; then
    echo "Error: Failed to create the output file."
    exit 5
fi

echo "Done!"
exit 0

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Error: No file provided. Usage: tabtocsv.sh filename

**********************************************************************

Code ran without errors

Time consumed = 0.00362s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Loop through all .tif files in the current directory
for f in *.tif; 
do  
    # Check if there are no .tif files in the directory
    if [ "$f" = "*.tif" ]; then
        echo "No .tif files found in the current directory."
        exit 1
    fi

    # Check if the file exists and is a regular file
    if [ ! -f "$f" ]; then
        echo "Error: File $f does not exist or is not a regular file."
        exit 1
    fi

    # Check if the file has the correct .tif extension
    if [[ "${f##*.}" != "tif" ]]; then
        echo "Error: $f is not a .tif file."
        exit 1
    fi

    # Check if the script has permission to read the input file
    if [ ! -r "$f" ]; then
        echo "Error: No read permission for $f."
        exit 1
    fi

    # Prepare the output file name
    output_file="$(basename "$f" .tif).png"

    # Check if the script has permission to write the output file
    if [ -e "$output_file" ] && [ ! -w "$output_file" ]; then
        echo "Error: No write permission for $output_file."
        exit 1
    fi

    # Perform the conversion from .tif to .png
    echo "Converting $f"
    convert "$f" "$output_file"

    # Verify if the output file was successfully created and has a .png extension
    if [ -f "$output_file" ] && [[ "${output_file##*.}" == "png" ]]; then
        echo "Successfully converted $f to $output_file."
    else
        echo "Error: Conversion failed for $f."
        exit 1
    fi
done

**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
No .tif files found in the current directory.

**********************************************************************

Code ran without errors

Time consumed = 0.00452s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 3 ]; then
  echo "Usage: $0 <file1> <file2> <output_file>"
  exit 1
fi

# Check if the input files exist and are readable
if [ ! -f "$1" ]; then
  echo "Error: File $1 does not exist."
  exit 1
fi

if [ ! -f "$2" ]; then
  echo "Error: File $2 does not exist."
  exit 1
fi

# Check if the output file is writable or if the directory is writable
if [ -f "$3" ] && [ ! -w "$3" ]; then
  echo "Error: File $3 is not writable."
  exit 1
fi

if [ ! -f "$3" ] && [ ! -w "$(dirname "$3")" ]; then
  echo "Error: Directory $(dirname "$3") is not writable."
  exit 1
fi

# Merge the files
cat "$1" > "$3"
if [ $? -ne 0 ]; then
  echo "Error: Failed to write content of $1 to $3"
  exit 1
fi

cat "$2" >> "$3"
if [ $? -ne 0 ]; then
  echo "Error: Failed to append content of $2 to $3"
  exit 1
fi

# Display the merged file
echo "Merged File is"
cat "$3"

**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Usage: ConcatenateTwoFiles.sh <file1> <file2> <output_file>

**********************************************************************

Code ran without errors

Time consumed = 0.00556s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Yumeng Huang  yh4724@ic.ac.uk
# Script: csvtospace.sh
# Description: Converts comma-separated values (CSV) files to space-separated values files
#
# If no file is provided, the script converts all CSV files in the current directory
# Saves the output into new files with the suffix "_space" added to the original filenames in the "week1/results" directory
# Arguments: 1 (optional) -> CSV file or leave blank to convert all CSV files in the directory
# Date: Oct 2024

# Function to convert a CSV file to a space-separated file
convert_file() {
    input_file="$1"
    
    # Check if the file exists
    if [ ! -f "$input_file" ]; then
        echo "Error: File '$input_file' not found!"
        exit 1
    fi

    # Check if the file is a .csv file
    if [ "${input_file##*.}" != "csv" ]; then
        echo "Error: The file must be a .csv file."
        exit 2
    fi

    # Set the output file name in the week1/results directory
    filename=$(basename "$input_file" .csv)
    output="../results/${filename}_space.csv"

    echo "Creating a space-delimited version of $input_file ..."

    # Convert commas to spaces and save to the new file
    cat "$input_file" | tr -s "," " " > "$output"

    # Check if the output file was successfully created
    if [ $? -ne 0 ]; then
        echo "Error: Failed to create the output file '$output'."
        exit 3
    fi

    echo "Done! The space-separated file is saved as '$output'."
}

# If an argument is provided, convert that specific file
if [ $# -eq 1 ]; then
    convert_file "$1"
else
    # Convert all CSV files in the current directory
    echo "No file specified. Converting all CSV files in the current directory..."

    for file in *.csv; do
        convert_file "$file"
    done
fi

exit 0

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
No file specified. Converting all CSV files in the current directory...
Error: File '*.csv' not found!

**********************************************************************

Code ran without errors

Time consumed = 0.00484s

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

expr: syntax error: missing argument after ‘+’

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!