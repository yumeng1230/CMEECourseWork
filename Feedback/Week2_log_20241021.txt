Starting code feedback for Yumeng, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.56 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Feedback, week1, .git, week2

Found the following files in parent directory: readme.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
.vscode/
.Rhistory
**********************************************************************

Found README in parent directory, named: readme.md

Printing contents of readme.md:

**********************************************************************
My CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: week1, week2

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: sandbox, code, results, data

Found the following files: .gitignore, readme.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:

**********************************************************************
###code

(All programs run in the code path)

#align_seqs.py

This script reads two DNA sequences from a file, compares them, and finds the best alignment between the sequences. The results are saved in a text file in results folder.

#cfexercise1

This script contains several utility functions that demonstrate basic mathematical operations such as finding square roots, determining the larger value, sorting values, and calculating factorials. It includes both iterative and recursive methods to calculate factorials. The script also contains a main function that runs and displays the results of these operations.

#dictionary.py

This script organizes a list of animal species and their taxonomic orders into a dictionary (taxa_dic). The dictionary maps each order to a set of species belonging to that order. The script demonstrates two methods: using a standard loop and using a list comprehension.

#lc1.py

This script extracts three separate lists from a tuple of bird data, where each bird entry contains the Latin name, common name, and mean body mass. It demonstrates two approaches: using list comprehensions and using conventional loops.

#lc2.py

This script processes UK rainfall data for 1910, using both list comprehensions and conventional loops to filter and extract specific months based on rainfall amounts.

#tuple.py

This script iterates over a tuple of bird species, where each entry contains the Latin name, common name, and body mass of the bird. It prints each bird's details on a separate line in a formatted manner.

oaks_debugme.py

This script processes a CSV file containing taxonomic data and identifies entries where the genus is close to "Quercus" (using fuzzy matching). It writes the matching entries (oak species) to a new CSV file.


**********************************************************************

Results directory is empty - good! 

Found 21 code files: cfexercisr2.py, oaks_debugme.py, test.py, oaks_test.py, align_seqs.py, lc2.py, basic_csv.py, basic_io1.py, basic_io3.py, lc1.py, boilerplate.py, dictionary.py, using_name.py, tuple.py, basic_io2.py, debugme.py, cfexercise1.py, test_control_flow.py, loops.py, control_flow.py, oaks.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file cfexercisr2.py...

File contents are:

**********************************************************************

########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y):
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
    while x: # while x is True
        print("hello! " + str(y))
        y += 1 # increment y by 1 
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)
**********************************************************************

Testing cfexercisr2.py...

cfexercisr2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 95.0

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********************************************************************

Code ran without errors

Time consumed = 0.02100s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

import csv
import sys
import difflib
import os

# Define function to check if the genus is close to 'quercus' using fuzzy matching
def is_an_oak(name):
    """
    Returns True if the name is close to 'quercus'
    
    >>> is_an_oak('Quercus')
    True
    >>> is_an_oak('quercus')
    True
    >>> is_an_oak('Querqus')
    True
    >>> is_an_oak('Pinus')
    False
    >>> is_an_oak('quercuz')
    True
    >>> is_an_oak('Betula')
    False
    
    """
    #cutoff=0.85 is the minimum similarity ratio required for a match to be considered. 
    close_matches = difflib.get_close_matches(name.lower(), ['quercus'], n=1, cutoff=0.85)
    return len(close_matches) > 0

def main(argv): 
    # Check if the ../results directory exists, if not, create it
    output_dir = '../results'
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Open the input file in read mode and the output file in append mode
    f = open('../data/TestOaksData.csv', 'r')
    g = open(os.path.join(output_dir, 'JustOaksData.csv'), 'a', newline='')  # Save output to '../results'

    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    
    for row in taxa:
        print(row)
        print("The genus is:") 
        print(row[0] + '\n')  # Output the genus name
        
        # Check if the genus is close to 'quercus' using fuzzy matching
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            # Write the relevant row to the output file if it's an oak
            csvwrite.writerow([row[0], row[1]])

    f.close()  # Close the input file
    g.close()  # Close the output file
    
    return 0

# Entry point for script execution
if __name__ == "__main__":
    status = main(sys.argv)

**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 94.0

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is:
Genus

['Quercus', ' robur']
The genus is:
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is:
Fraxinus

['Pinus', ' sylvestris']
The genus is:
Pinus

['Quercus', ' cerris']
The genus is:
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is:
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.02686s

======================================================================
Inspecting script file test.py...

File contents are:

**********************************************************************

**********************************************************************

Testing test.py...

test.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 92.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.01982s

======================================================================
Inspecting script file oaks_test.py...

File contents are:

**********************************************************************
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus'

    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercus robur')
    True

    # A typo
    >>> is_an_oak('Quercuss')
    False
    """
    return name.lower().startswith('quercus ')

print(is_an_oak.__doc__)

import doctest
doctest.testmod()   # Run embedded tests

**********************************************************************

Testing oaks_test.py...

oaks_test.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
 Returns True if name is starts with 'quercus'

    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercus robur')
    True

    # A typo
    >>> is_an_oak('Quercuss')
    False
    

**********************************************************************

Code ran without errors

Time consumed = 0.05599s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
# Two example sequences to match
# seq2 = "ATCGCCGGATTACGGG"
# seq1 = "CAATTCGGAT"

# Assign the longer sequence to s1, and the shorter to s2
# l1 is the length of the longest, l2 that of the shortest

# Function to read sequences from a file
def read_sequences_from_file(file_path):
    sequences = {}
    with open(file_path, 'r') as file:
        for line in file:
            print(f"Read line: {line.strip()}")  # Print each line for debugging

            # Skip empty lines
            if line.strip() == "":
                continue

            # Parse lines like seq1="CAATTCGGAT"
            try:
                key, value = line.split('=')  # Separate seq1="CAATTCGGAT"
                sequences[key.strip()] = value.strip().strip('"')  # Remove spaces and quotes
            except Exception as e:
                print(f"Error parsing line: {line}, Error message: {e}")
                continue

    return sequences.get('seq1'), sequences.get('seq2')

# Specify input file
input_file = "../data/seqs_data.csv"  
seq1, seq2 = read_sequences_from_file(input_file)

# Check if both sequences were successfully read
if seq1 and seq2:
    print(f"Seq1: {seq1}")
    print(f"Seq2: {seq2}")
else:
    print("Failed to read Seq1 or Seq2")

# Example: Call the function
input_file = "../data/seqs_data.csv"  # Specify file path
seq1, seq2 = read_sequences_from_file(input_file)
print(f"Seq1: {seq1}")
print(f"Seq2: {seq2}")

# Determine which sequence is longer
l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1  # Swap the two lengths

# A function that computes a score by returning the number of matches
# starting from an arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = ""  # To hold string displaying alignments
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]:  # If the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # Some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# Now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1):  # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2  # Think about what this is doing!
        my_best_score = z  

import os

# Ensure ../results directory exists, create it if not
if not os.path.exists('../results'):
    os.makedirs('../results')

# Open ../results/alignment_results.txt file and write the results
with open('../results/alignment_results.txt', 'w') as f:
    # Output my_best_align, s1, and my_best_score to the file
    print(my_best_align, file=f)
    print(s1, file=f)
    print(f"Best score: {my_best_score}", file=f)

print("Results have been written to ../results/alignment_results.txt")

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************
Read line: sequence_name,sequence
Error parsing line: sequence_name,sequence
, Error message: not enough values to unpack (expected 2, got 1)
Read line: seq1="CAATTCGGAT"
Read line: seq2="ATCGCCGGATTACGGG"
Read line: 
Seq1: CAATTCGGAT
Seq2: ATCGCCGGATTACGGG
Read line: sequence_name,sequence
Error parsing line: sequence_name,sequence
, Error message: not enough values to unpack (expected 2, got 1)
Read line: seq1="CAATTCGGAT"
Read line: seq2="ATCGCCGGATTACGGG"
Read line: 
Seq1: CAATTCGGAT
Seq2: AT
**********************************************************************

Code ran without errors

Time consumed = 0.02095s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
month_more_than_100mm=[i for i in rainfall if i[1] > 100]
print(month_more_than_100mm)
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
month_less_50mm=[i[0] for i in rainfall if i[1] < 50]
print(month_less_50mm)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 
month_more_than_100mm=[]
for i in rainfall:
   if i[1] > 100:
      month_more_than_100mm.append(i)
print(month_more_than_100mm)

month_less_50mm=[]
for i in rainfall:
    if i[1] < 50:
        month_less_50mm.append(i[0])
print(month_less_50mm)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.01993s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YumengHuang_yh4724/week2/code/basic_csv.py", line 5, in <module>
    with open('../data/testcsv.csv','r') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/testcsv.csv'

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 82.5

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.01981s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 80.5

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.02540s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 
latin_name=[i[0] for i in birds]
print (latin_name)

common_name=[i[1] for i in birds]
print (common_name)

mean_body_masses=[i[2] for i in birds]
print (mean_body_masses)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
latin_name=[]
for i in birds:
    latin_name.append(i[0])
print(latin_name)

common_name=[]
for i in birds:
    common_name.append(i[1])
print(common_name)

mean_body_masses=[]
for i in birds:
    mean_body_masses.append(i[2])
print(mean_body_masses)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 78.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.02019s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Yumeng Huang (yh4724@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 78.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.01973s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

#### Your solution here #### 
# Create an empty dictionary 
taxa_dic = {}

# Populate the dictionary
for species, order in taxa:
    if order not in taxa_dic:
        taxa_dic[order] = set()  # Create an empty set if the order is not yet a key
    taxa_dic[order].add(species)  # Add the species to the set for the corresponding order

# Print the resulting dictionary
for order, species_set in taxa_dic.items():
    print(f"'{order}': {species_set}")

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### Your solution here #### 

# Create the dictionary using a list comprehension
taxa_dic = {order: {species for species, ord_name in taxa if ord_name == order} for _, order in taxa}

# Print the resulting dictionary
for order, species_set in taxa_dic.items():
    print(f"'{order}': {species_set}")



**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 76.5

Output (only first 500 characters): 


**********************************************************************
'Chiroptera': {'Myotis lucifugus'}
'Rodentia': {'Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi', 'Cleithrionomys rutilus'}
'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}
'Carnivora': {'Lyacon pictus', 'Canis lupus', 'Arctocephalus gazella'}
'Chiroptera': {'Myotis lucifugus'}
'Rodentia': {'Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi', 'Cleithrionomys rutilus'}
'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}
'Carnivora': {'Lyacon pictus', 'Canis 
**********************************************************************

Code ran without errors

Time consumed = 0.01992s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 74.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02032s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

for i in birds:
    print("Latin name:",i[0],"Common name:",i[1],"Mass:",i[2])
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 72.5

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
Latin name: Delichon urbica Common name: House martin Mass: 19
Latin name: Junco phaeonotus Common name: Yellow-eyed junco Mass: 19.5
Latin name: Junco hyemalis Common name: Dark-eyed junco Mass: 19.6
Latin name: Tachycineata bicolor Common name: Tree swallow Mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.02085s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 70.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.01970s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
def buggyfunc(x):
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 68.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YumengHuang_yh4724/week2/code/debugme.py", line 8, in <module>
    buggyfunc(20)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YumengHuang_yh4724/week2/code/debugme.py", line 5, in buggyfunc
    z = x/y
        ~^~
ZeroDivisionError: division by zero

======================================================================
Inspecting script file cfexercise1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

_author_ = 'Yumeng Huang (yh4724@ic.ac.uk)'
_version_ = '0.01'

import sys

# Function to calculate the square root of a number
def foo_1(x):
    return x ** 0.5

# Function to return the larger of two values
def foo_2(x, y):
    if x > y:
        return x
    return y

# Function to return three values in ascending order
def foo_3(x, y, z):
    # Ensure x is the smallest
    if x > y:
        tmp = y
        y = x
        x = tmp
    # Ensure y is less than or equal to z
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

# Function to calculate the factorial of x using a loop
def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

# Recursive function to calculate the factorial of x
def foo_5(x):
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     
# Function to calculate the factorial of x using a while loop (no if statement)
def foo_6(x):
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

# Main function to demonstrate the use of the defined functions
def main(argv):
    """Main function to print results from the defined functions."""
    
    # Calculate and print the square root of 9
    print(f"foo_1(9) = {foo_1(9)}")
    
    # Find the larger value between 10 and 5
    print(f"foo_2(10, 5) = {foo_2(10, 5)}")
    
    # Return three values in ascending order
    print(f"foo_3(3, 1, 2) = {foo_3(3, 1, 2)}")
    
    # Calculate the factorial of 9 using a loop
    print(f"foo_4(9) = {foo_4(9)}")
    
    # Calculate the factorial of 9 using recursion
    print(f"foo_5(9) = {foo_5(9)}")
    
    # Calculate the factorial of 9 using a while loop
    print(f"foo_6(9) = {foo_6(9)}")

    return 0

# Entry point of the script
if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing cfexercise1.py...

cfexercise1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 64.5

Output (only first 500 characters): 


**********************************************************************
foo_1(9) = 3.0
foo_2(10, 5) = 10
foo_3(3, 1, 2) = [1, 2, 3]
foo_4(9) = 362880
foo_5(9) = 362880
foo_6(9) = 362880

**********************************************************************

Code ran without errors

Time consumed = 0.02052s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Your Name (Your.Name@your.email.address)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
        
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def main(argv): 
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()   # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 64.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.05609s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 62.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.02010s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 61.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02054s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 59.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus petraea', 'Quercus cerris', 'Quercus robur'}
{'Quercus petraea', 'Quercus cerris', 'Quercus robur'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}

**********************************************************************

Code ran without errors

Time consumed = 0.02377s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 59.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!